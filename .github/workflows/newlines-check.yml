name: Check LF line endings and tabs

on:
  push:
  pull_request:

permissions:
  contents: read

env:
  TARGET_DIRS: "src,tests"
  EXCLUDE_DIRS: "third_party,vendor,external,submodules"
  FAIL_ON_ISSUE: "true"

jobs:
  check-lf-and-tabs:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: false
          fetch-depth: 1

      - name: Scan for CRLF and tabs (with tab line numbers)
        id: scan
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p report

          IFS=',' read -ra TARGETS  <<< "${TARGET_DIRS:-src,tests}"
          IFS=',' read -ra EXCLUDES <<< "${EXCLUDE_DIRS:-third_party,vendor,external,submodules}"

          # Exclusion regex: (^|/)(dir1|dir2)(/|$)
          if ((${#EXCLUDES[@]})); then
            EX_RE="(^|/)($(printf '%s|' "${EXCLUDES[@]}" | sed 's/|$//'))(/|$)"
          else
            EX_RE="^$a"  # match nothing
          fi

          # Collect tracked files (NUL-safe)
          FILES=()
          for dir in "${TARGETS[@]}"; do
            [[ -d "$dir" ]] || continue
            while IFS= read -r -d '' f; do
              FILES+=("$f")
            done < <(git ls-files -z \
              "${dir}/**/*.cpp" "${dir}/**/*.hpp" "${dir}/**/*.h" \
              "${dir}/**/*.cc"  "${dir}/**/*.cxx" "${dir}/**/*.hh" "${dir}/**/*.hxx" \
              "${dir}/**/*.r" "${dir}/**/*.R" \
              "${dir}/**/*.md" "${dir}/**/*.rmd" "${dir}/**/*.Rmd" \
              "${dir}/**/*.qmd" \
              "${dir}/**/CMakeLists.txt" "${dir}/**/*.cmake" \
            )
          done

          # Filter out excluded dirs anywhere in path
          FILTERED=()
          for f in "${FILES[@]}"; do
            if ! [[ "$f" =~ $EX_RE ]]; then
              FILTERED+=("$f")
            fi
          done

          echo "Checked file count: ${#FILTERED[@]}"

          crlf_offenders=()
          tab_offenders=()

          # Clear/report files (if re-running locally)
          : > report/tab_lines.txt || true

          for f in "${FILTERED[@]}"; do
            # CR present → CRLF or mixed
            if grep -Iq $'\r' -- "$f"; then
              crlf_offenders+=("$f")
            fi

            # Tabs present
            if grep -q $'\t' -- "$f"; then
              tab_offenders+=("$f")
              # Append file:line:snippet with [TAB] markers
              # -nH prints line numbers and file name
              # sed shows tabs as [TAB] for visibility; it does not modify files
              grep -nH $'\t' -- "$f" | sed 's/\t/[TAB]/g' >> report/tab_lines.txt
            fi
          done

          issue_found=false
          summary_file="$GITHUB_STEP_SUMMARY"

          if ((${#crlf_offenders[@]})); then
            issue_found=true
            printf "%s\n" "${crlf_offenders[@]}" > report/crlf_files.txt
            for f in "${crlf_offenders[@]}"; do
              echo "::warning file=${f}::File has CRLF line endings; expected LF"
            done
            {
              echo "## Files with CRLF line endings"
              echo
              for f in "${crlf_offenders[@]}"; do
                echo "- \`${f}\`"
              done
              echo
            } >> "$summary_file"
          fi

          if ((${#tab_offenders[@]})); then
            issue_found=true
            printf "%s\n" "${tab_offenders[@]}" > report/tab_files.txt
            for f in "${tab_offenders[@]}"; do
              echo "::warning file=${f}::File contains tab characters; expected spaces"
            done
            {
              echo "## Files containing tab characters"
              echo
              for f in "${tab_offenders[@]}"; do
                echo "- \`${f}\`"
              done
              echo
              echo "> See artifact \`tab_lines.txt\` for line numbers and snippets (tabs shown as [TAB])."
            } >> "$summary_file"
          fi

          if [[ "$issue_found" == false ]]; then
            echo "✅ All checked files use LF and contain no tabs."
            echo "✅ All checked files use LF and contain no tabs." >> "$summary_file"
          elif [[ "${FAIL_ON_ISSUE:-false}" == "true" ]]; then
            exit 1
          fi

      - name: Upload report artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: line-ending-and-tab-report
          path: report/
          if-no-files-found: ignore
