name: Check LF line endings and tabs

on:
  push:
  pull_request:

permissions:
  contents: read

env:
  # Comma-separated list of directories to scan
  TARGET_DIRS: "src,tests"
  # Comma-separated list of subdirectories to exclude from checks
  EXCLUDE_DIRS: ""
  # Set to "true" to fail instead of just warn
  FAIL_ON_ISSUE: "true"

jobs:
  check-lf-and-tabs:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: false
          fetch-depth: 1

      - name: Scan for CRLF and tabs
        shell: bash
        run: |
          set -euo pipefail

          IFS=',' read -ra TARGETS <<< "${TARGET_DIRS}"
          IFS=',' read -ra EXCLUDES <<< "${EXCLUDE_DIRS}"

          # Build list of files from all target dirs
          ALL_FILES=()
          for dir in "${TARGETS[@]}"; do
            if [[ -d "$dir" ]]; then
              while IFS= read -r -d '' f; do
                ALL_FILES+=("$f")
              done < <(git ls-files \
                "${dir}/**/*.cpp" "${dir}/**/*.hpp" "${dir}/**/*.h" \
                "${dir}/**/*.cc"  "${dir}/**/*.cxx" "${dir}/**/*.hh" "${dir}/**/*.hxx" \
                "${dir}/**/*.r" "${dir}/**/*.R" \
                "${dir}/**/*.md" "${dir}/**/*.rmd" "${dir}/**/*.Rmd" \
                "${dir}/**/*.qmd" \
                "${dir}/**/*.lua" \
                "${dir}/**/CMakeLists.txt" "${dir}/**/*.cmake" \
              2>/dev/null || true)
            fi
          done

          # Filter out excluded dirs
          FILTERED_FILES=("${ALL_FILES[@]}")
          if [[ -n "${EXCLUDE_DIRS}" ]]; then
            EX_REGEX="^($(echo "${EXCLUDE_DIRS}" | sed 's/,/|/g'))(/|$)"
            readarray -t FILTERED_FILES < <(printf '%s\n' "${ALL_FILES[@]}" | grep -Ev "${EX_REGEX}" || true)
          fi

          echo "Checked file count: ${#FILTERED_FILES[@]}"

          crlf_offenders=()
          tab_offenders=()

          for f in "${FILTERED_FILES[@]}"; do
            # Detect CRLF
            if grep -Iq $'\r' -- "$f"; then
              crlf_offenders+=("$f")
            fi
            # Detect tabs
            if grep -Iq $'\t' -- "$f"; then
              tab_offenders+=("$f")
            fi
          done

          issue_found=false
          summary_file="$GITHUB_STEP_SUMMARY"

          if ((${#crlf_offenders[@]} > 0)); then
            issue_found=true
            echo "::group::CRLF issues"
            echo "Found files with CRLF line endings:"
            for f in "${crlf_offenders[@]}"; do
              echo "::warning file=${f}::File has CRLF line endings; expected LF"
            done
            echo "::endgroup::"

            {
              echo "## Files with CRLF line endings"
              echo ""
              for f in "${crlf_offenders[@]}"; do
                echo "- \`${f}\`"
              done
              echo ""
            } >> "$summary_file"
          fi

          if ((${#tab_offenders[@]} > 0)); then
            issue_found=true
            echo "::group::Tab issues"
            echo "Found files containing tab characters:"
            for f in "${tab_offenders[@]}"; do
              echo "::warning file=${f}::File contains tab characters; expected spaces"
            done
            echo "::endgroup::"

            {
              echo "## Files containing tab characters"
              echo ""
              for f in "${tab_offenders[@]}"; do
                echo "- \`${f}\`"
              done
              echo ""
            } >> "$summary_file"
          fi

          if [[ "$issue_found" == false ]]; then
            echo "✅ All checked files use LF line endings and no tabs."
            echo "✅ All checked files use LF line endings and no tabs." >> "$summary_file"
          elif [[ "${FAIL_ON_ISSUE}" == "true" ]]; then
            exit 1
          fi
