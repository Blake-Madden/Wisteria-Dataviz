name: clang-tidy

on: [push, pull_request]

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true
  
permissions:
  contents: read

jobs:
  clang-tidy:
    runs-on: ubuntu-latest

    env:
      BUILD_DIR: build
      FIXES_DIR: clang_tidy_fixes
      REPORT_HTML: clang-tidy-report.html

      # Scan these roots for *.cpp
      INCLUDE_DIRS: |
        src

      # Exclude these folders (repo-root relative).
      # Tip: list the folder roots; the step adds '/*' for you.
      EXCLUDE_DIRS: |
        src/CRCpp
        src/easyexif
        src/utfcpp
        src/wxSimpleJSON
        src/easyexif

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Download wxWidgets
        run: |
             export DISPLAY=:0.0
             export DEBIAN_FRONTEND=noninteractive
             sudo apt-get update && sudo apt-get install xvfb cmake libtbb-dev libgtk-3-0 libgtk-3-dev libwayland-server0 libwayland-cursor0 libwayland-client0
             git clone https://github.com/wxWidgets/wxWidgets.git --recurse-submodules

      - name: Install LLVM/Clang + deps
        run: |
          sudo apt-get update
          sudo apt-get install -y clang-tidy clang cmake ninja-build python3-yaml

      # Create compile_commands.json for clang-tidy
      - name: Configure CMake compile_commands.json
        run: |
          cmake -S . -B "$BUILD_DIR" -G Ninja -DCMAKE_EXPORT_COMPILE_COMMANDS=ON
          # If your project generates headers, you can add a light build:
          # cmake --build "$BUILD_DIR" -j
      
      - name: Collect changed .cpp files
        id: files
        shell: bash
        run: |
            set -euo pipefail

            # 1) Determine diff range
            if [[ "${{ github.event_name }}" == "pull_request" ]]; then
              base="${{ github.event.pull_request.base.sha }}"
              head="${{ github.event.pull_request.head.sha }}"
            else
              base="${{ github.event.before }}"
              head="${{ github.event.after }}"
            fi

            echo "Diffing $base...$head"

            # 2) Start with changed .cpp files only
            changed_cpp=$(git diff --name-only "$base" "$head" -- '*.cpp' | sort || true)

            # Helper to escape regex special chars
            esc_re() { sed -e 's/[.[\*^$()+?{}|]/\\&/g'; }

            # 3) Keep only files under INCLUDE_DIRS (if provided)
            #    (INCLUDE_DIRS is a newline-separated list via job env)
            mapfile -t roots < <(printf '%s\n' "$INCLUDE_DIRS" | sed '/^\s*$/d')
            if [[ ${#roots[@]} -gt 0 ]]; then
              # Build a single regex: ^(dir1|dir2|...)/  (dirs escaped)
              inc_rx="$(printf '%s\n' "${roots[@]}" \
                        | sed 's#/*$##' \
                        | esc_re \
                        | paste -sd'|' -)"
              if [[ -n "${inc_rx}" ]]; then
                changed_cpp="$(printf '%s\n' "$changed_cpp" | grep -E "^(${inc_rx})/" || true)"
              fi
            fi

            # 4) Drop anything under EXCLUDE_DIRS (if provided)
            mapfile -t exdirs < <(printf '%s\n' "$EXCLUDE_DIRS" | sed '/^\s*$/d')
            if [[ ${#exdirs[@]} -gt 0 && -n "${changed_cpp}" ]]; then
              filtered="$changed_cpp"
              for d in "${exdirs[@]}"; do
                d="${d%/}"                                 # trim trailing slash
                rx="$(printf '%s' "$d" | esc_re)"
                # Remove lines that start with d/ or exactly d (covers file-at-root edge cases)
                filtered="$(printf '%s\n' "$filtered" | grep -v -E "^${rx}(/|$)" || true)"
              done
              changed_cpp="$filtered"
            fi

            # 5) Output to step output
            echo "files<<EOF" >> "$GITHUB_OUTPUT"
            echo "$changed_cpp" >> "$GITHUB_OUTPUT"
            echo "EOF" >> "$GITHUB_OUTPUT"

            echo "Changed .cpp files after include/exclude filtering:"
            printf '%s\n' $changed_cpp || true

      - name: Short-circuit if none
        if: ${{ steps.files.outputs.files == '' }}
        run: |
          echo "No matching *.cpp after excludes."
          echo "No matching *.cpp after excludes." >> $GITHUB_STEP_SUMMARY

      - name: Run clang-tidy
        if: ${{ steps.files.outputs.files != '' }}
        shell: bash
        env:
          FIXES_DIR: clang_tidy_fixes
        run: |
          set -euo pipefail
          mkdir -p "$FIXES_DIR" logs

          # Read the newline-separated list
          while IFS= read -r file; do
            [[ -z "$file" ]] && continue
            echo "=== clang-tidy -> $file ==="

            # POSIX-safe path mangling (avoid ${var//.../...} which is a bashism)
            base="$(printf '%s' "$file" | sed 's#/#__#g')"

            clang-tidy -p "$BUILD_DIR" -fix=false "$file" \
              --extra-arg=-fno-color-diagnostics \
              --extra-arg=-fdiagnostics-color=never \
              > "logs/${base}.txt" 2>&1 || true
          done <<< "${{ steps.files.outputs.files }}"

      - name: Generate HTML report
        if: ${{ steps.files.outputs.files != '' }}
        run: |
          python3 .github/scripts/clang_tidy_html_report.py \
            --logs logs/*.txt \
            --out "$REPORT_HTML" \
            --counts ct_counts.json \
            --fail-on warnings
          {
            echo "### Clang-Tidy Report (read-only)";
            echo;
            echo "Generated **$REPORT_HTML** (fail-on=warnings after suppressions).";
          } >> "$GITHUB_STEP_SUMMARY"

      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: clang-tidy-report
          path: |
            ${{ env.REPORT_HTML }}
            logs/
            ct_counts.json
          if-no-files-found: warn
          retention-days: 14
