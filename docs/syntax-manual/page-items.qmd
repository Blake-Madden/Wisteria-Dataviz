# Basic Page Items

## All Items {#item-properties .unnumbered}

Properties common to all items:

- `"id"`: A (unique) numeric identifier for the item. This can be referenced by other items in the report. \
     An example can be adding an ID to a graph and then inserting a [common-axis](#common-axis-properties) to the
     report that accepts this ID.
- `"canvas-margins"`: A numeric array (one to four numbers), representing the item's canvas margin going clockwise,
     starting at 12 o'clock.
- `"padding"`: A numeric array (one to four numbers), representing the item's padding going clockwise,
     starting at 12 o'clock.
- `"pen"`: The item's pen, which includes [pen](#pen-properties) properties.
- `"outline"`: A boolean array, specifying the item's border outlines to draw going clockwise,
     starting at 12 o'clock. Note that `"pen"` must be valid and that this is not supported by all objects.
- `"scaling"`: A numeric value of how much to scale the object's size. For example, `2.0` will be double the
     default size.
- `"show"`: A boolean value specifying whether to show the item.
- `"anchoring"`: Controls the starting point of where the object is drawn. \
  This is usually only relative for objects being embedded on a plot (e.g., annotations). \
  Available options are:
  - `"bottom-left-corner"`
  - `"bottom-right-corner"`
  - `"center"` (the default)
  - `"top-left-corner"`
  - `"top-right-corner"`
- `"relative-alignment"`: How an object is aligned with its parent (e.g., an axis title relative to its axis). \
  Available options are:
  - `"flush-left"`
  - `"flush-right"`
  - `"flush-top"`
  - `"flush-bottom"`
  - `"centered"`
- `"horizontal-page-alignment"`: How to horizontally align the item within its area. \
  Available options are:
  - `"left-aligned"`
  - `"right-aligned"`
  - `"centered"`
- `"vertical-page-alignment"`: How to vertically align the item within its area. \
  Available options are:
  - `"top-aligned"`
  - `"bottom-aligned"`
  - `"centered"`
- `"fit-row-to-content"`: A boolean value specifying whether the item's calculated height should
    control how tall its canvas row is.
- `"fixed-width"`: A boolean value specifying whether the item should be constrained
    to its calculated width within its row.

::: {.minipage data-latex="{\textwidth}"}
## Common Axis {#common-axis-properties .unnumbered}

Properties for `"common-axis"` nodes:

- All properties available to [axis](#axis-properties) nodes are included. \
  Note that `"axis-type"` will specify where to place the common axis.
- `"child-ids"`: A numeric array of IDs of the graphs that this common axis will manage. \
    IDs are assigned to graphs using the `"id"` property, which should be numeric.
- `"common-perpendicular-axis"`: If `"axis-type"` is `"bottom-x"` and this is `true`,
    then the min and max of the graphs' left X axes will be used for the ranges of all the graphs.
    
Example:

```json
{
  "type": "common-axis",
  "axis-type": "top-x",
  "axis-pen": null,
  "label-display": "no-display",
  "child-ids": [ 1, 2, 3 ],
  "common-perpendicular-axis": true,
  "title": {
    "text": ""
  },
  "brackets": {
    "dataset": "Revenue",
    "simplify": true,
    "style": "curly-braces",
    "variables": {
      "label": "FY",
      "value": "FYStart"
    }
  }
}
```
:::

::: {.minipage data-latex="{\textwidth}"}
## Empty Spacer {#empty-spacer-properties .unnumbered}

An `"empty-spacer"` node will act as a placeholder on a page.
In contrast to a "`spacer`", an `"empty-spacer"` does not consume any space on the page and does not effect any other items' sizes.

These are used for filling gaps in rows that have less items than others, thus ensuring that items across all rows will align properly.
For example, if one row has a chart and legend and the next row only has a chart, then an `"empty-spacer"` should be added to the second row.

`"empty-spacer"` nodes do not take any properties.
:::

::: {.minipage data-latex="{\textwidth}"}
## Fillable Shape {#fillable-shape-properties .unnumbered}

Properties for `"fillable-shape"` nodes:

- `"icon"`: A string specifying the icon to draw the shape as.
- `"label"`: A string to display on the shape, which contains [label](#label-properties) properties.
- `"pen"`: The pen to draw with, which includes [pen](#pen-properties) properties.
- `"brush"`: The brush to paint with, which includes [brush](#brush-properties) properties.
- `"size"`: The size of the shape, which contains the following properties:
  - `"width"`: The width.
  - `"height"`: The height.
- `"fill-percent"`: The percent to fill the shape, which is a number between `0.0` and `1.0`. \
  This can either be a numeric or a formula reference.
  
Example:

```json
 {
  "type": "fillable-shape",
  "canvas-margins": [ 5, 5, 5, 5 ],
  "icon": "woman",
  "fit-row-to-content": true,
  "fill-percent": "{{PercentFemaleDecimal}}",
  "size": {
    "width": 125,
    "height": 256
  },
  "pen": {
    "color": "black",
    "style": "solid"
  },
  "brush": {
    "color": "pink",
    "style": "solid"
  }
}
```
:::

::: {.minipage data-latex="{\textwidth}"}
## Image {#image-properties .unnumbered}

Properties for `"image"` nodes:

- `"image-import"`: An image import specification. (See [image file properties](#image-file-properties).)
- `"resize-method"`: How the image's size is adjusted when its bounding box is changed. \
  Available options are:
  - `"downscale-only"`
  - `"downscale-or-upscale"` (the default)
  - `"upscale-only"`
  - `"no-resize"`

```json
{
  "type": "image",
  "image-import": {
    "path": "basketball-banner.png",
    "effect": "gray-scale"
  },
  "canvas-margins": [ 0, 5, 5, 5 ],
  "fit-row-to-content": true
}
```
:::

::: {.minipage data-latex="{\textwidth}"}
## Label {#label-properties .unnumbered}

Properties for `"label"` nodes:

- `"text"`: The title's text. \
  Note that this property supports embedded formulas that can reference user-defined values loaded from the
  [constants](#constants-properties) section.
- `"orientation"`: string specifying the orientation of the text. \
  Available options are:
  - `"vertical"`
  - `"horizontal"`
- `"background"`: The background color. This can be either a color name or hex-encoded value.
- `"color"`: The font color. This can be either a color name or hex-encoded value.
- `"bold"`: `true` to make the text bold.
- `"line-spacing"`: A number representing the spaces between lines (if text is multi-line).
- `"text-alignment"`: How to align the label's text. \
  The available options are:
  - `"flush-left"` or `"ragged-right"`
  - `"flush-right"` or `"ragged-left"`
  - `"centered"`
  - `"justified"` or `"justified-at-character"`
  - `"justified-at-word"`
- `"left-image"`: Properties specifying an image to display on the left side of the label. \
  The available options are:
  - `"image-import"`: An image import specification. (See [image file properties](#image-file-properties).)
- `"top-image"`: Properties specifying an image to display above the label. \
  The available options are:
  - `"image-import"`: An image import specification. (See [image file properties](#image-file-properties).)
  - `"offset"`: A number specifying how far from the top of the label's box to draw the image. (Default is `0`.)
- `"top-shape"`: Properties specifying a shape (or array of shapes) to display above the label. \
  The available options are:
  - `"icon"`: A string specifying the icon to draw the shape as.
  - `"label"`: A string to display on the shape.
  - `"pen"`: The pen to draw with, which includes [pen](#pen-properties) properties.
  - `"brush"`: The brush to paint with, which includes [brush](#brush-properties) properties.
  - `"size"`: The size of the shape, which contains the following properties:
    - `"width"`: The width.
    - `"height"`: The height.
  - `"fill-percent"`: The percent to fill the shape, which is a number between `0.0` and `1.0`.
  Note that if multiple shapes are provided, then they will be drawn on top of each other, creating a composite shape.
- `"top-shape-offset"`: A number specifying how far from the top of the label's box to draw the top shape or image. (Default is `0`.)
- `"header"`: Attributes to apply to the first row of the label. \
  The following sub-properties are available:
  - `"bold"`: `true` to make the header bold.
  - `"color"`: The font color for the header. This can be either a color name or hex-encoded value.
  - `"text-alignment"`: How to align the label's text. \
      The available options are:
    - `"flush-left"` or `"ragged-right"`
    - `"flush-right"` or `"ragged-left"`
    - `"centered"`
    - `"justified"` or `"justified-at-character"`
    - `"justified-at-word"`
  - `"relative-scaling:"`: numeric value of how much to scale the header's font size relative to the label's scaling.
       For example, `2.0` will double the header's default font size compared to the rest of the label. \
       Note that this will only affect the header scaling. To alter the label's scaling, use the label's root-level
       `"scaling"` property.

Note that it is recommended to set `"fit-row-to-content"` to `true` if the label is a separate
object on the canvas (i.e., not a label on another object).

Example:

```json
{
  "type": "label",
  "canvas-margins": [ 5, 5, 5, 5 ],
  "text": "{{ReportName()}}",
  "horizontal-page-alignment": "right-aligned",
  "text-alignment": "flush-right",
  "fit-row-to-content": true,
  "fixed-width": true,
  "line-spacing": -5,
  "header": {
    "bold": true
  },
  "padding": [ 0, 5, 0, 5 ]
}
```

Example with a colorful header and logo:

```json
{
  "type": "label",
  "canvas-margins": [ 5, 5, 5, 5 ],
  "text": "Miskatonic University",
  "top-image": {
    "image-import": { "path": "CollegeLogo.png" },
    "offset": 15
  },
  "horizontal-page-alignment": "left-aligned",
  "fit-row-to-content": true,
  "line-spacing": -10,
  "color": "{{CollegeColor}}",
  "text-alignment": "justified",
  "header": {
    "bold": true,
    "color": "{{CollegeColor}}",
    "relative-scaling": 3,
    "text-alignment": "left-aligned"
  },
  "padding": [ 0, 5, 0, 0 ]
}
```

Note that empty labels can be used to draw divider lines, as well as a way to force another item in the same row
to be stretched to the full width of the page.
(A spacer is a shorthand for an empty label.)
For example, a row could be written as this:

```json
{
  "items": [
    {
      "type": "label",
      "description": "Just a divider, double lined with a space between them",
      "outline": [ true, false, true, false ],
      "pen": {
        "color": "{{CompanyColor}}",
        "width": 2
      },
      "canvas-margins": [ 5, 5, 5, 5 ],
      "padding": [ 1, 0, 0, 0 ],
      "fit-row-to-content": true
    },
    {
      "type": "spacer",
      "description": "Spacer to stretch previous line across the page"
    }
  ]
}
```

:::

::: {.minipage data-latex="{\textwidth}"}
## Shape {#shape-properties .unnumbered}

Properties for `"shape"` nodes:

- `"icon"`: A string specifying the icon to draw the shape as.
- `"label"`: A string to display on the shape.
- `"pen"`: The pen to draw with, which includes [pen](#pen-properties) properties.
- `"brush"`: The brush to paint with, which includes [brush](#brush-properties) properties.
- `"size"`: The size of the shape, which contains the following properties:
  - `"width"`: The width.
  - `"height"`: The height.
:::

::: {.minipage data-latex="{\textwidth}"}
## Spacer {#spacer-properties .unnumbered}

A `"spacer"` node will add a blank space to the canvas, equal to the height of the other rows
(and width of the rest of the items within the same row).

Most importantly, this will resize the other items around it.
For example, if a canvas only contains a singe chart, then that chart will be stretched to the height of the page.
If, however, a spacer is added to a row underneath it, then the chart will only consume half the page.

`"spacer"` nodes do not take any properties.
:::
